@using View.Services
<div>

    <button @onclick="PrevPage">Prev</button>
    <label>Page:</label>
    @PaginationState.Page
    <button @onclick="NextPage">Next</button>

    <label>Per page:</label>
    <select @onchange="ChangePagination">
        @foreach(var option in options)
        {
            if (option == selected)
            {
                <option selected value="@option" >@option</option>
            }
            else
            {
                <option value="@option">@option</option>
            }
        }
    </select>
</div>

@code {

    [Parameter] public PaginationState PaginationState { get; set; }

    [Parameter] public EventCallback<int> OnPaginationChanged { get; set; }

    private int selected = 10;
    private List<int> options = new List<int>()
    {
        1,2,5,10,30
    };

    protected override async Task OnInitializedAsync()
    {
        PaginationState.SetDisplayCount(selected);
        await OnPaginationChanged.InvokeAsync();
    }

    private async Task ChangePagination(ChangeEventArgs val)
    {
        if (int.TryParse((string?)val.Value, out var newCount))
        {
            PaginationState.SetDisplayCount(newCount);
            await OnPaginationChanged.InvokeAsync();
        }
    }

    private async Task NextPage(EventArgs arg)
    {
        PaginationState.SetPage(PaginationState.Page + 1);
        await OnPaginationChanged.InvokeAsync();
    }

    private async Task PrevPage(EventArgs arg)
    {
        PaginationState.SetPage(PaginationState.Page - 1);
        await OnPaginationChanged.InvokeAsync();
    }

}