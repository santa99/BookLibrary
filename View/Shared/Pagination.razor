@using View.Data
@using View.Services
@implements IDisposable

<div>
    <button @onclick="PrevPage">Prev</button>
    <label>Page:</label>
    @PaginationState.Page
    <button @onclick="NextPage">Next</button>

    <label>Per page:</label>
    <select @onchange="ChangePagination">
        @foreach (var option in _options)
        {
            if (option == _selected)
            {
                <option selected value="@option">@option</option>
            }
            else
            {
                <option value="@option">@option</option>
            }
        }
    </select>
</div>

@code {
    
    [Parameter] public IPaginationService Service { get; set; } = default!;

    private PaginationState PaginationState => Service.PaginationState;

    private int _selected = 10;

    private List<int> _options = new()
    {
        1, 2, 5, 10, 30
    };

    protected override void OnInitialized()
    {
        PaginationState.SetDisplayCount(_selected);
        Service.PageChanged += OnPageChanged;
    }

    private void OnPageChanged(object? sender, int pageNumber)
    {
        if (sender != this)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void ChangePagination(ChangeEventArgs val)
    {
        if (!int.TryParse((string?)val.Value, out var newCount))
        {
            return;
        }

        PaginationState.SetDisplayCount(newCount);
        Service.NotifyPageChanged(this, PaginationState.Page);
    }

    private void NextPage()
    {
        PaginationState.SetPage(PaginationState.Page + 1);
        Service.NotifyPageChanged(this, PaginationState.Page);
    }

    private void PrevPage()
    {
        PaginationState.SetPage(PaginationState.Page - 1);
        Service.NotifyPageChanged(this, PaginationState.Page);
    }

    public void Dispose()
    {
        Service.PageChanged -= OnPageChanged;
    }

}