@inject HttpClient HttpClient
@using Contracts.Models
@using View.Data
@implements IDisposable

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            @if (Book == null) return;

            <h2>@Book.Name</h2>
            Author: @Book.Author
        </div>
        <form class="dialog-body">
            <div>
                @if (Book == null) return;

                @if (Book.Borrowed == null)
                {
                    <select class="select" @onchange="SelectReader">
                        @foreach (var readersInfo in BorrowReturnViewService.BorrowState.ReadersList)
                        {
                            <option value="@readersInfo.ReaderCardId">@readersInfo.FirstName @readersInfo.LastName</option>
                        }
                    </select>
                }
            </div>
        </form>

        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="CancelSelection">Cancel</button>

            @if (Book == null) return;

            @if (Book.Borrowed != null)
            {
                <button class="btn btn-success ml-auto" @onclick="ReturnBook">Return</button>
            }
            else
            {
                <button class="btn btn-success ml-auto" @onclick="BorrowBook">Borrow</button>
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter] public IBorrowReturnViewService BorrowReturnViewService { get; set; } = default!;
    
    [Parameter] public EventCallback<bool> OnCancel { get; set; }

    private BookModel? Book { get; set; }

    protected override void OnInitialized()
    {
        BorrowReturnViewService.ItemSelected += BorrowReturnViewServiceOnItemSelected;
        Book = BorrowReturnViewService.BorrowState.CurrentBook;
    }

    public void Dispose()
    {
        BorrowReturnViewService.ItemSelected -= BorrowReturnViewServiceOnItemSelected;
    }

    private void BorrowReturnViewServiceOnItemSelected(object? sender, int bookId)
    {
        Book = BorrowReturnViewService.BorrowState.CurrentBook;
    }

    private void SelectReader(ChangeEventArgs changeEvent)
    {
        if (int.TryParse(changeEvent.Value?.ToString(), out var newReadersCardId) && newReadersCardId != -1)
        {
            BorrowReturnViewService.BorrowState.SelectReader(newReadersCardId);
        }
    }

    private async Task CancelSelection()
    {
        BorrowReturnViewService.BorrowState.CancelConfigureDialog();
        
        await OnCancel.InvokeAsync();
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task BorrowBook()
    {
        await BorrowReturnViewService.NotifyBookBorrowed();
    }

    private async Task ReturnBook()
    {
        await BorrowReturnViewService.NotifyBookReturned();
    }

}