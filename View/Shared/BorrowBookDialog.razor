@inject HttpClient HttpClient
@using Contracts.Models
@using View.Services

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            @if (Book == null) return;
            
            <h2>@Book.Name</h2>
            Author: @Book.Author
        </div>
        <form class="dialog-body">
            <div>
                @if (Book == null) return;

                @if (Book.Borrowed == null)
                {
                    <select class="select" @onchange="SelectReader">
                        @foreach (var readersInfo in ReadersInfos)
                        {
                            <option value="@readersInfo.ReaderCardId">@readersInfo.FirstName @readersInfo.LastName</option>
                        }
                    </select>
                }
            </div>
        </form>

        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>

            @if (Book == null) return;

            @if (Book.Borrowed != null)
            {
                <button class="btn btn-success ml-auto" @onclick="ReturnBook">Return</button>
            }
            else
            {
                <button class="btn btn-success ml-auto" @onclick="BorrowBook">Borrow</button>
            }
        </div>
    </div>
</div>

@code {
    
    [Inject]
    public ReadersInfoService? ReadersInfoService { get; set; }

    [Parameter]
    public BookModel? Book { get; set; }
    
    [Parameter]
    public EventCallback OnCancel { get; set; }
    
    [Parameter]
    public EventCallback<int> OnBookBorrow { get; set; }
    
    [Parameter]
    public EventCallback<int> OnBookReturn { get; set; }
    
    private ReadersInfo? _selected;
    private List<ReadersInfo> ReadersInfos { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        if (ReadersInfoService == null)
        {
            return;
        }
        
        ReadersInfos = await ReadersInfoService.GetAllReaders();
        _selected = ReadersInfos.FirstOrDefault();
    }
    
    private Task SelectReader(ChangeEventArgs changeEvent)
    {
        if (int.TryParse(changeEvent.Value?.ToString(), out var newReadersCardId) && newReadersCardId != -1)
        {
            _selected = ReadersInfos.FirstOrDefault(info => info.ReaderCardId == newReadersCardId);
        }

        return Task.CompletedTask;
    }

    private async Task BorrowBook()
    {
        if (_selected == null)
        {
            return;
        }
        await OnBookBorrow.InvokeAsync(_selected.ReaderCardId);
    }

    private async Task ReturnBook()
    {
        if (Book == null)
        {
            return;
        }
        await OnBookReturn.InvokeAsync(Book.Id);
    }
}