@using Contracts.Models
@using Contracts.Models.Responses
@using View.Data
@implements IDisposable

<tr style="text-align: left;">
    <td>
        <p>
            @Book.Id
            <input type="checkbox" value="@Checked" @onchange="OnBookCheckChanged"/>
        </p>
    </td>
    <td>
        <input type="text" name="name" value="@Book.Name" @onchange="OnBookNameChanged"/>
    </td>
    <td>
        <input type="text" name="author" value="@Book.Author" @onchange="OnBookAuthorChanged"/>
    </td>
    <td>
        @if (Book.Borrowed != null)
        {
            <div>
                <div>
                    <b>@Book.Borrowed.FirstName @Book.Borrowed.LastName</b>
                </div>
                <div>@Book.Borrowed.From.ToString("dd/MM/yyyy")</div>
            </div>
        }
        else
        {
            <ul>
                <li>Free</li>
            </ul>
        }
    </td>
</tr>
@if (!string.IsNullOrEmpty(EntryErrorMessage))
{
    <div class="validation-message">@EntryErrorMessage</div>
}

@code {

    [Parameter] public IEditableListViewService<BookModel> Service { get; set; } = default!;
    [Parameter] public EditableTable Table { get; set; } = default!;
    [Parameter] public BookModel Book { get; set; } = default!;
    [Parameter] public bool Checked { get; set; }

    private string? EntryErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(Service);
        ArgumentNullException.ThrowIfNull(Table);
        ArgumentNullException.ThrowIfNull(Book);
        Checked = Service.EditableState.IsSelected(Book);
        Service.ItemChanged += ServiceOnItemChanged;
        Service.ItemSelected += ServiceOnItemSelected;
        Service.OnItemError += ServiceOnOnItemError;;
        EntryErrorMessage = null;
    }

    private void ServiceOnOnItemError(object? sender, (BookModel, ErrorCodeModel) e)
    {
        if (e.Item1.Id != Book.Id)
        {
            return;
        }
        
        EntryErrorMessage = e.Item2.Message;
        
        if (sender != null)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void ServiceOnItemSelected(object? sender, Tuple<BookModel, bool> e)
    {
        if (e.Item1.Id != Book.Id)
        {
            return;
        }
        
        if (Checked == e.Item2)
        {
            return;
        }

        Checked = e.Item2;
        
        if (sender != null)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void ServiceOnItemChanged(object? sender, BookModel changedItem)
    {
        if (Book.Id != changedItem.Id)
        {
            return;
        }
        
        Book = changedItem;
        
        if (sender != null)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        Service.ItemSelected -= ServiceOnItemSelected;
        Service.ItemChanged -= ServiceOnItemChanged;
        EntryErrorMessage = "";
        Checked = false;
    }

    private void OnBookCheckChanged(ChangeEventArgs e)
    {
        bool.TryParse(e.Value?.ToString(), out var current);
        if (current == Checked)
        {
            return;
        }

        Checked = current;
        Service.NotifyItemSelected(this, Book, Checked);
    }

    private void OnBookNameChanged(ChangeEventArgs e)
    {
        var tmp = e.Value?.ToString();
        var bookName = !(string.IsNullOrWhiteSpace(tmp)) ? tmp : Book.Name;
        if (bookName == Book.Name)
        {
            return;
        }

        Book.Name = bookName;
        Service.NotifyItemChanged(this, Book);
    }

    private void OnBookAuthorChanged(ChangeEventArgs e)
    {
        var tmp = e.Value?.ToString();
        var bookAuthor = !(string.IsNullOrWhiteSpace(tmp)) ? tmp : Book.Author;
        if (bookAuthor == Book.Author)
        {
            return;
        }

        Book.Author = bookAuthor;
        Service.NotifyItemChanged(this, Book);
    }
}