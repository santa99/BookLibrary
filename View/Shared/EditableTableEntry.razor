@using Contracts.Models
@using View.Services
@using Index = View.Pages.Index

<tr style="text-align: left;" @onclick="ClickRow">
    <td>
        @if (Editing())
        {
            <input type="checkbox" @bind="Checked" @onclick="Check"/>
        }
        @Book.Id
    </td>
    <td>
        @if (Editing())
        {
            <input type="text" name="name" value="@Book.Name" @onchange="OnBookNameChanged"/>
        }
        else
        {
            @Book.Name
        }
    </td>
    <td>
        @if (Editing())
        {
            <input type="text" name="author" value="@Book.Author" @onchange="OnBookAuthorChanged"/>
        }
        else
        {
            @Book.Author
        }
    </td>
    <td>
        <div>@(Book.Borrowed != null ? @BorrowedBy(Book.Borrowed) : "Free")</div>
    </td>
</tr>


@code {
    
    [Parameter] public Index Root { get; set; }
    [Parameter] public BookModel Book { get; set; }
    [Parameter] public EventCallback<BookModel> OnBorrowBook { get; set; }
    [Parameter] public EditState EditState { get; set; }
    [Parameter] public bool Checked { get; set; }
    [Parameter] public EventCallback<EditableTableEntry> OnChecked { get; set; }
    
    private bool _isEdited;
    private bool _dirty;

    private async Task<bool> Check()
    {
        await OnChecked.InvokeAsync(this);
        return Checked;
    }

    private bool Editing()
    {
        return @EditState.IsEditMode && EditState.IsMeEdit(this);
    }

    protected override Task OnInitializedAsync()
    {
        Root.Add(this);
        return base.OnInitializedAsync();
    }

    private async Task ClickRow()
    {
        if (EditState.IsEditMode)
        {
            EnterEdit();
            return;
        }

        await OnBorrowBook.InvokeAsync(Book);
    }

    private void EnterEdit()
    {
        if (_isEdited)
        {
            return;
        }
            
        _isEdited = true;
        EditState.StartEditEntry(this);
    }

    private void OnBookNameChanged(ChangeEventArgs e)
    {
        var tmp = e.Value?.ToString();
        var bookName = !(string.IsNullOrWhiteSpace(tmp)) ? tmp : Book.Name;
        if (bookName == Book.Name)
        {
            return;
        }
        _dirty = true;
        Book.Name = bookName;
    }

    private void OnBookAuthorChanged(ChangeEventArgs e)
    {
        var tmp = e.Value?.ToString();
        var bookAuthor = !(string.IsNullOrWhiteSpace(tmp)) ? tmp : Book.Author;
        if (bookAuthor == Book.Author)
        {
            return;
        }
        _dirty = true;
        Book.Author = bookAuthor;
    }

    public async Task SaveChanges(BooksService booksService)
    {
        if (!_dirty)
        {
            _isEdited = false;
            Checked = false;
            return;
        }

        var updatedBook = await booksService.UpdateBook(Book);
        if (updatedBook == null)
        {
            return;
        }
        
        UpdateEntry(updatedBook);

        _dirty = false;
        _isEdited = false;
        Checked = false;
    }

    public async Task DiscardChanges(BooksService booksService)
    {
        if (!_dirty)
        {
            _isEdited = false;
            Checked = false;
            return;
        }

        var revertedBook = await booksService.GetBook(Book.Id);
        if (revertedBook == null)
        {
            return;
        }
        // Book = revertedBook;
        // StateHasChanged();
        UpdateEntry(revertedBook);

        _dirty = false;
        _isEdited = false;
        Checked = false;
    }

    internal void UpdateEntry(BookModel bookModel)
    {
        Book.Id = bookModel.Id;
        Book.Name = bookModel.Name;
        Book.Author = bookModel.Author;
        Book.Borrowed = bookModel.Borrowed;
    }

    private static string BorrowedBy(BorrowModel borrowModel)
    {
        return "'" + borrowModel.FirstName + " " + borrowModel.LastName + "' borrowed on [" + borrowModel.From.ToString("dd MMMM yyyy") + "]";
    }
    
}