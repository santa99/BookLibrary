@page "/"

@namespace View.Pages

@using Contracts.Models
@using View.Controllers
@using View.Services

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject BooksController BooksController
@inject BorrowState BorrowState
@inject PaginationState PaginationState
@inject EditState EditState


<div class="main">
    <h3>Book page</h3>
    <div class="control-panel">
        <div class="child2">
            @if (!EditState.IsEditMode)
            {
                <button @onclick="EditState.EnterEditMode">Edit</button>
            }
            else
            {
                <button @onclick="AddNewBook">Add</button>
                <button @onclick="EditState.SaveChanges">Save</button>
                <button @onclick="async () => { await EditState.DiscardChanges(); DiscardAdded();}">Discard</button>
                @if (@ToRemove)
                {
                    <button @onclick="RemoveItems">Remove</button>
                }
            }
        </div>
    </div>
    <div class="navbar-toggler">
        <div class="nav-scrollable">
            <table class="table table-responsive fl-table" style="width:100%">
                <tr style="text-align: left;">
                    <th>
                        <label >Id</label>
                    </th>
                    <th>
                        <label >Name</label>
                    </th>
                    <th>
                        <label >Author</label>
                    </th>
                    <th>Status</th>
                </tr>
                @foreach (var item in @_added)
                {
                    <EditableTableEntry Book="@item" OnBorrowBook="BorrowState.ShowConfigureDialog" EditState="EditState" Root="this" OnChecked="OnCheckedUpdate"/>
                }
                
                @foreach (var item in @_books)
                {
                    <EditableTableEntry Book="@item" OnBorrowBook="BorrowState.ShowConfigureDialog" EditState="EditState" Root="this" OnChecked="OnCheckedUpdate"/>
                }
            </table>
        </div>
    </div>
    <div class="control-panel">
        <div class="child2">
            <Pagination OnPaginationChanged="OnPaginationChanged" PaginationState="PaginationState"/>
        </div>
    </div>
</div>

@if (BorrowState.ShowingBookConfigurationDialog)
{
    <BorrowBookDialog Book="BorrowState.CurrentBook"
                      OnCancel="BorrowState.CancelConfigureDialog"
                      OnBookReturn="BorrowState.ReturnBook"
                      OnBookBorrow="BorrowState.BorrowBook"/>
}

@code {
    private List<BookModel> _added = new();
    private List<BookModel>? _books = new();
    private readonly List<EditableTableEntry> _entries = new();

    [Inject] BooksService BooksService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _books = await ReloadBooks();
        EditState.BooksService = BooksService;
        BorrowState.BookModelUpdated = BookModelUpdated;
    }

    private void BookModelUpdated(object? sender, BookModel bookModel)
    {
        var editableTableEntry = _entries.FirstOrDefault(entry => entry.Book.Id == bookModel.Id);
        editableTableEntry?.UpdateEntry(bookModel);
    }

    private Task<List<BookModel>> ReloadBooks()
    {
        return BooksService.GetBooks(PaginationState.StartWindow, PaginationState.Count);
    }

    async Task OnPaginationChanged(int newCount)
    {
        _books = await ReloadBooks();
    }


    public void Add(EditableTableEntry editableTableEntry)
    {
        _entries.Add(editableTableEntry);
    }

    private void AddNewBook()
    {
        _added.Insert(0, new BookModel()
        {
            Id = -1
        });
    }

    private void DiscardAdded()
    {
        var nonDirty = _entries
            .Where(entry => _added.Contains(entry.Book))
            .Select(editEntry => editEntry.Book);

        _added.RemoveAll(model => nonDirty.Contains(model));
    }

    private List<EditableTableEntry> _EntriesToRemove = new();
    private bool ToRemove => _EntriesToRemove.Count > 0;
    
    private void OnCheckedUpdate(EditableTableEntry editableTableEntry)
    {
        if (!editableTableEntry.Checked)
        {
            _EntriesToRemove.Add(editableTableEntry);
        }
        else
        {
            _EntriesToRemove.Remove(editableTableEntry);
        }
    }

    private async Task RemoveItems()
    {
        var editableTableEntries = new List<EditableTableEntry>(_EntriesToRemove);
        var bookModels = editableTableEntries.Select(entry => entry.Book);

        foreach (var bookModel in bookModels)
        {
            await BooksService.RemoveBook(bookModel);
        }
        
        _books.RemoveAll(model => bookModels.Contains(model));
        _EntriesToRemove.RemoveAll(entry => bookModels.Contains(entry.Book));
    }
}