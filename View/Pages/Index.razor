@page "/"

@namespace View.Pages

@using Contracts.Models
@using View.Controllers
@using View.Services

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject BooksController BooksController
@inject BorrowState BorrowState
@inject PaginationState PaginationState
@inject EditState EditState


<div class="main">
    <h3>Book page</h3>
    <div>
        <Pagination OnPageCountChanged="OnPaginationChanged" PaginationState="PaginationState"/>
    </div>
    <div>
        @if (!EditState.IsEditMode)
        {
            <button @onclick="EditState.EnterEditMode">Edit</button>
        }
        else
        {
            <button @onclick="EditState.ExitEditMode">End edit</button>
            <button @onclick="EditState.SaveChanges">Save</button>
            <button @onclick="EditState.DiscardChanges">Discard</button>
        }
    </div>
    <table class="table table-responsive fl-table" style="width:100%">
        <tr style="text-align: left;">
            <th><label >Id</label></th>
            <th><label >Name</label></th>
            <th><label >Author</label></th>
            <th>Status</th>
        </tr>
        @foreach (var item in @_books)
        {
            <EditableTableEntry Book="@item" OnBorrowBook="BorrowState.ShowConfigureDialog" EditState="EditState" Root="this"/>
        }
    </table>
</div>

@if (BorrowState.ShowingBookConfigurationDialog)
{
    <BorrowBookDialog Book="BorrowState.CurrentBook"
                      OnCancel="BorrowState.CancelConfigureDialog"
                      OnBookReturn="BorrowState.ReturnBook"
                      OnBookBorrow="BorrowState.BorrowBook"/>
}

@code {
    private List<BookModel>? _books = new();
    private List<EditableTableEntry> _entries = new();

    [Inject] BooksService BooksService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _books = await ReloadBooks();
        EditState.BooksService = BooksService;
        BorrowState.BookModelUpdated = BookModelUpdated;
    }

    private void BookModelUpdated(object? sender, BookModel bookModel)
    {
        var editableTableEntry = _entries.FirstOrDefault(entry => entry.Book.Id == bookModel.Id);
        editableTableEntry?.UpdateEntry(bookModel);
    }

    private Task<List<BookModel>> ReloadBooks()
    {
        return BooksService.GetBooks(PaginationState.Start, PaginationState.Count);
    }

    async Task OnPaginationChanged(int newCount)
    {
        _books = await ReloadBooks();
    }

    public void Add(EditableTableEntry editableTableEntry)
    {
        _entries.Add(editableTableEntry);
    }

}