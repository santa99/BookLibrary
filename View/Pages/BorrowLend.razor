@page "/BorrowLend"
@using View.Data
@inject IBorrowLendViewService BorrowLendViewService;

<div class="main">
    <h3>Borrow / Lend book</h3>
    <div class="control-panel">
        <div class="child2">
            <BookCategory @ref="BookCategory"/>
        </div>
    </div>
    <div class="navbar-toggler">
        <div class="nav-scrollable">
            <CascadingValue Value="BorrowLendViewService">
                <BorrowTable/>
            </CascadingValue>
        </div>
    </div>
    <div class="control-panel">
        <div class="child2">
            <Pagination Service="BorrowLendViewService"/>
        </div>
    </div>
</div>

@if (BorrowLendViewService.BorrowState.ShowingBookConfigurationDialog)
{
    <CascadingValue Value="BorrowLendViewService">
        <BorrowBookDialog OnCancel="OnCancel"/>
    </CascadingValue>
}


@code {

    private BookCategory? BookCategory;

    protected override void OnInitialized()
    {
        BorrowLendViewService.NotifyPageChanged(this, BorrowLendViewService.PaginationState.PageSize);
        BorrowLendViewService.ItemSelected += (sender, i) => InvokeAsync(StateHasChanged);
        BorrowLendViewService.ItemChanged += (sender, args) => InvokeAsync(StateHasChanged);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return Task.CompletedTask;
        if (BookCategory == null) return Task.CompletedTask;
        BookCategory.ValueChanged += (sender, state) =>
        {
            BorrowLendViewService.PaginationState.BookState = state;
            BorrowLendViewService.NotifyPageChanged(this, BorrowLendViewService.PaginationState.PageSize);
        };
        return Task.CompletedTask;
    }

    private static void OnCancel()
    {
    }

}